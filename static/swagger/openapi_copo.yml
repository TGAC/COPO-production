openapi: 3.0.0
info:
  title: COPO API
  description: |
    The following are Swagger User Interface (UI) Application Programming Interface (API) methods for audits, 
    manifests, samples, profiles, statistics and Tree of Life (ToL) fields mapping.

    Sensitive data such as ORCIDs and email addresses will be excluded from API responses.

    Please view our [API methods' documentation](https://copo-docs.readthedocs.io/en/latest/retrieval/copo-api.html) for guidance.

  version: 1.1.8
servers:
  - url: /api
    description: Current Website Server

paths:
  # Section: API key
  /apiKey/:
    post:
      tags:
        - API Key
      summary: Obtain API Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema: # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Username and Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBody'
        '500':
          $ref: '#/components/responses/RangeError'

  # Section: Audit
  /audit/samples:
    get:
      tags:
        - Audit
      summary: Get update audits for sample records by copo ID, updatable field and/or project
      description: >
        Retrieves update logs based on inputted parameters.

        If no parameters are provided, COPO will return a list of updates for all samples.
      parameters:
        - $ref: '#/components/parameters/copo_id'
        - $ref: '#/components/parameters/project'
        - $ref: '#/components/parameters/updatable_field'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array of update audits by given project type, updatable field and copo_id (if provided)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '500':
          $ref: '#/components/responses/RangeError'

  /audit/sample/{from}/{to}:
    get:
      tags:
        - Audit
      summary: Get update audit for sample records between dates
      description: >
        Returns an array of sample objects updated between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples updated greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples updated less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: \'from\' must be earlier than \'to\'
        '500':
          $ref: '#/components/responses/RangeError'

  /audit/sample/manifest_id/{manifest_id}:
    get:
      tags:
        - Audit
      summary: Get update audit for sample records by manifest ID
      description: |
        Get a list of sample update records in COPO by manifest ID.

        If manifest_id is not provided, COPO will return a list of all sample updates.
      parameters:
        - name: manifest_id
          in: path
          description: If known, provide a uuid 'manifest_id'. To query multiple 'manifest_id', separate them with a comma.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '500':
          $ref: '#/components/responses/RangeError'

  /audit/sample/update_type/{update_type}:
    get:
      tags:
        - Audit
      summary: Get update audit for samples by 'update_type'
      description: |
        Get sample update audit records based on the type of person who performed the audit.

        If no 'project' is provided, COPO will return a list of sample updates for all sample types.
      parameters:
        - $ref: '#/components/parameters/project_multiple'
        - name: update_type
          in: path
          required: true
          description: The type of person who performed the audit
          schema:
            type: string
            enum:
              - system
              - user
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: Invalid sample type found in request
        '500':
          $ref: '#/components/responses/RangeError'

  /audit/sample/{field}/{field_value}:
    get:
      tags:
        - Audit
      summary: Get update audit for samples by 'RACK_OR_PLATE_ID', 'SPECIMEN_ID', 'TUBE_OR_WELL_ID', 'biosampleAccession', 'public_name' or 'sraAccession' field
      description: |
        Get sample update audit records by 'RACK_OR_PLATE_ID' field, 'SPECIMEN_ID' field, 'TUBE_OR_WELL_ID' field, 'biosampleAccession' field, 'public_name' field or 'sraAccession' field.

        COPO will return a list of sample updates if updates were done a sample that matches the desired field with the value provided.
      parameters:
        - name: field
          in: path
          required: true
          description: A list of field options to query sample updates by
          schema:
            $ref: '#/components/schemas/SampleAudit_field_query_options'
        - name: field_value
          in: path
          required: true
          description: The value of the field to query sample updates by
          schema:
            type: string
            pattern: '^.+$' # Ensures at least one character is present
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: Invalid value found in request
        '500':
          $ref: '#/components/responses/RangeError'

  # Section: Manifest
  /manifest:
    get:
      tags:
        - Manifest
      summary: Get all manifests
      description: >
        COPO will return a list of manifest ids
      parameters:
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/sequencing_centre:
    get:
      tags:
        - Manifest
      summary: Get all manifests by sequencing centre
      description: >
        COPO will return a list of manifest ids based on the given sequencing_centre
      parameters:
        - $ref: '#/components/parameters/sequencing_centre'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/current_version:
    get:
      tags:
        - Manifest
      summary: Get current manifest version
      description: >
        If no manifest type is provided, COPO returns a list of project names along with the latest manifest version associated with each.
      parameters:
        - $ref: '#/components/parameters/manifest_type'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array of the latest manifest version for a given project type
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/{manifest_id}:
    get:
      tags:
        - Manifest
      summary: Get samples in manifest
      description: >
        Get full sample information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - name: return_type
          in: query
          description: Export data into selected format
          schema:
            $ref: '#/components/schemas/ReturnTypes_with_rocrate'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: invalid manifest_id
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\'
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/{project}/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids of a project between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to} in project {project}
      parameters:
        - name: project
          in: path
          required: true
          description: A comma-separated list of supported Earth BioGenome Project (EBP) projects in lowercase (e.g. dtol, asg, dtolenv, erga)
          schema:
            type: string
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\ and project must be in the list of supported projects'
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/{manifest_id}/sample_status:
    get:
      tags:
        - Manifest
      summary: Get status of samples in manifest
      description: >
        Get minimal sample status information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample status objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleStatus'
        '400':
          description: invalid manifest_id
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/validate:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - profile_id
                - manifest
              type: object
              properties:
                profile_id:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: id of queued validation report to be queried
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/validate/report:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - validation_report_id
              properties:
                validation_report_id:
                  type: string
      responses:
        '200':
          description: status and/or validation errors for given manifest validation
        '500':
          $ref: '#/components/responses/RangeError'

  /manifest/validations:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      responses:
        '200':
          description: validations for authorised user
        '500':
          $ref: '#/components/responses/RangeError'

  # Section: Sample
  /sample/{project}:
    get:
      tags:
        - Sample
      summary: Get copo_ids of sample records within a project
      description: >
        Get a list of copo IDs of samples within a project in COPO
      parameters:
        - name: project
          in: path
          required: true
          description: |
            To query multiple projects, separate them with a comma.
            
            Projects:
            - **ASG** - Aquatic Symbiosis Genomics (ASG)
            - **DTOL** - Darwin Tree of Life (DTOL)
            - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
            - **ERGA** - European Reference Genome Atlas (ERGA)
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample copo_ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericOutputSchema'
        '400':
          description: InvalidId found in request

        '404':
          description: Invalid project found in request. No sample records exist for the given project.
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/associated_tol_project:
    get:
      tags:
        - Sample
      summary: Get sample records by associated project type
      parameters:
        - $ref: '#/components/parameters/associated_tol_project_multiple'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: Invalid associated profile type found in request

        '404':
          description: Invalid associated project type found in request. No sample records exist for the given associated project.
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/project/manifest_version/fields:
    get:
      tags:
        - Sample
      summary: Get project fields by manifest version
      description: |
        Get a list of fields of a project for a given manifest version.

        - If a manifest version is provided, COPO will return a list of fields for the first project in the dropdown menu based on the latest manifest version associated with that project.
      parameters:
        - $ref: '#/components/parameters/project_required'
        - name: manifest_version
          in: query
          schema:
            $ref: '#/components/schemas/ManifestVersions'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of fields for a given manifest version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersion'

        '400':
          description: Invalid manifest version found in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersionError'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/tube_or_well_ids:
    get:
      tags:
        - Sample
      summary: Retrieve a list of profile titles  with their associated sample Tube or Well IDs.
      description: |
        **Description:**

        The retrieval process includes:

        1.	**Mandatory Criteria**
          -	Filter by project (required)
        2.	**Optional Criteria**
          -	Filter by associated_tol_project if provided
          -	Apply a date range filter based on the first and last sample manifest upload dates.


        **Field Mappings:**

        To clarify the relationships between fields in the **Profile** and **Sample** entities:
        1. profile_title or title in Profile corresponds to copo_profile_title in Sample.
        2. profile_type or type in Profile corresponds to tol_project in Sample.

      parameters:
        - $ref: '#/components/parameters/project_required'
        - $ref: '#/components/parameters/associated_tol_project_query'
        - name: d_from
          in: query
          description: ISO 8601 formatted full date-time of the first manifest upload, i.e. manifests submitted or updated on or after this date will be matched. e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - name: d_to
          in: query
          description: ISO 8601 formatted full date-time of the last manifest upload, i.e. manifests submitted or updated before this date will be matched. e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array of profile titles with their associated Tube or Well IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileTubeOrWellIDAssociationList'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/{from}/{to}:
    get:
      tags:
        - Sample
      summary: Get sample records between dates
      description: >
        Returns an array of sample objects submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: \'from\' must be earlier than \'to\'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/updatable_fields:
    get:
      tags:
        - Sample
      summary: Get fields that can be updated by resubmitting a manifest in a project
      description: >
        Get a list of all the fields of a project that can be updated in COPO
      parameters:
        - $ref: '#/components/parameters/project_required'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of updatable sample fields
        '400':
          description: Invalid project found in request
        '401':
          description: No updatable fields found for given project
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/copo_id/{copo_ids}:
    get:
      tags:
        - Sample
      summary: Get sample records by copo_id
      description: >
        Get full sample information for the samples returned from the given {copo_ids}. In public repositories, "copo_id" is referred to as "alias".
      parameters:
        - name: copo_ids
          in: path
          required: true
          description: hexadecimal sample ids, separated by commas
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: InvalidId found in request
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/biosampleAccession/{biosampleAccessions}:
    get:
      tags:
        - Sample
      summary: Get sample records by biosampleAccession
      description: >
        Get full sample information for the samples returned from the given {biosampleAccessions}
      parameters:
        - name: biosampleAccessions
          in: path
          required: true
          description: Biosample accessions created by European Nucleotide Archive (ENA), separated by commas
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/sample_field/{field}/{values}:
    get:
      tags:
        - Sample
      summary: Get sample records by field and value(s)
      description: |
        Get full sample information for the samples returned from the given *{field}* and *{values}*

        **Note**: Some records may match multiple values for the *{field}*, depending on the *{values}* input.
        This happens because *{values}* are treated as substring matches — so results may include records where your input appears within a longer string.
        You may need to further filter the results to narrow them down precisely.
      parameters:
        - name: field
          in: path
          required: true
          description: a known sample field to search for
          schema:
            $ref: '#/components/schemas/Sample_long2'
        - name: values
          in: path
          required: true
          description: Format - a comma separated list of values to look for
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/sequencing_centre:
    get:
      tags:
        - Sample
      summary: Get sample records by sequencing centre
      description: >
        Get full sample information for the samples returned based on the given sequencing_centre
      parameters:
        - $ref: '#/components/parameters/sequencing_centre'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/taxon_id/{taxon_ids}:
    get:
      tags:
        - Sample
      summary: Get sample records by taxon ids
      description: >
        Get full sample information for the samples returned from the given {taxon_ids}
      parameters:
        - name: taxon_ids
          in: path
          required: true
          description: Format - a single taxon ID for querying one taxon, or a comma-separated list of taxon IDs for querying multiple taxa.
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '500':
          $ref: '#/components/responses/RangeError'

  /sample/with_submitted_bioimages:
    get:
      tags:
        - Sample
      summary: Displays minimal information about accepted samples that have associated bioimages
      description: >
        Fetch minimal records of accepted samples that have associated bioimages, filtered by mandatory project type and optional date range.
      parameters:
        - $ref: '#/components/parameters/project_required'
        - name: d_from
          in: query
          description: ISO 8601 formatted full date-time of the first bioimage submission, i.e. bioimages submitted or updated on or after this date will be matched. e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - name: d_to
          in: query
          description: ISO 8601 formatted full date-time of the last bioimage submission, i.e. bioimages submitted or updated before this date will be matched. e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200':
          description: A JSON array of sample data if they have been accepted and have associated bioimages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SamplesWithSubmittedBioimages'
        '500':
          $ref: '#/components/responses/RangeError'

  # /sample/StudyFromSampleAccession/{sample_ids}:
  #   get:
  #     tags:
  #       - Sample
  #     summary: Get study records by sample accessions
  #     description: >
  #       Get study information for the samples returned from the given {sample_ids}
  #     parameters:
  #       - name: sample_ids
  #         in: path
  #         required: true
  #         description: Format - a comma separated list of biosample accessions or European Nucleotide Archive (ENA)/sraAccessions
  #         schema:
  #           type: string
  #           minimum: 1
  #           maximum: 1
  #       - $ref: '#/components/parameters/standard'
  #       - $ref: '#/components/parameters/return_type'
  #     responses:
  #       '200': # status code
  #         description: A JSON array sample objects
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/AccessionListShort'
  #       '500':
  #         $ref: '#/components/responses/RangeError'

  # /sample/SampleFromStudyAccession/{biostudyAccessions}:
  #   get:
  #     tags:
  #       - Sample
  #     summary: Get samples by biostudyAccessions
  #     description: >
  #       Get accession information for the samples returned from the given {biostudyAccessions}
  #     parameters:
  #       - name: biostudyAccessions
  #         in: path
  #         required: true
  #         description: Format - a comma separated list of biostudy accessions
  #         schema:
  #           type: string
  #       - $ref: '#/components/parameters/standard'
  #       - $ref: '#/components/parameters/return_type'
  #     responses:
  #       '200': # status code
  #         description: A JSON array sample objects
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/SampleAccessionList'
  #       '500':
  #         $ref: '#/components/responses/RangeError'

  # Section: Profile
  /profiles:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Make a profile for authenticated user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - type
              properties:
                title: # <!--- form field name
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                type:
                  type: string
                  enum:
                    [
                      'Genomics',
                      ""
                    ]
                  required: true
      responses:
        '200':
          description: representation of the created profile
        '500':
          $ref: '#/components/responses/RangeError'
    get:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Get profile records for authenticated user
      responses:
        '200':
          description: representation of the created profile
        '500':
          $ref: '#/components/responses/RangeError'


  /profiles/{profile_id}:
    get:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
      summary: Get profile by profile_id
      description: |
        Get a profile by its ID.
      responses:
        '200':
          description: A JSON object representing the profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicProfile'
        '500':
          $ref: '#/components/responses/RangeError'

    put:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - type
              properties:
                title: # <!--- form field name
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                type:
                  type: string
                  enum:
                    [
                      'Genomics',
                      ""
                    ]
                  required: true
      summary: Update profile by profile_id
      description: |
        Update a profile by its ID.
      responses:
        '200':
          description: A JSON object representing the updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicProfile'
        '500':
          $ref: '#/components/responses/RangeError'

  /profiles/{profile_id}/files:
    get:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
      summary: Get File names by profile_id
      description: |
        Get a list of file names by its ID.
      responses:
        '200':
          description: A JSON object representing the file names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '500':
          $ref: '#/components/responses/RangeError'

  /profiles/{profile_id}/files/presignedurls:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - file_names
              properties:
                file_names:
                  type: array
                  items:
                    type: string
      summary: Get presigned urls for file upload
      description: |
        Get presigned urls for file upload
      responses:
        '200':
          description: A JSON object representing the file name and url
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PresignedUrl'                
        '500':
          $ref: '#/components/responses/RangeError'


  /profiles/singlecells/checklists:
    get:
      tags:
        - Profile
      summary: Get supported checklist for singlecell schema
      description: |
        Get a list of supported checklist for singlecell schema.
      responses:
        '200':
          description: A JSON object representing the checklist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Checklist'
        '500':
          $ref: '#/components/responses/RangeError'

  /profiles/{profile_id}/singlecells/studies:
    get:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
        - $ref: '#/components/parameters/profile_id'
        - in: query
          name: checklist_id
          required: false
          description: The ID of the checklist to use for the study
          schema:
            type: string
            minimum: 1
      summary: Get list of studies within the profile
      description: |
        Get list of studies within the profile.
      responses:
        '200':
          description: A JSON list representing the studies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Study'
        '500':
          $ref: '#/components/responses/RangeError'

    post:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - checklist_id
                - file
              properties:
                checklist_id:
                  type: string
                  description: Name of the checklist to use
                file:
                  type: string
                  format: binary
      summary: Get list of study within the profile
      description: |
        Get list of study within the profile.
      responses:
        '200':
          description: A JSON list representing the study
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the study creation
                  message:
                    type: string
                    description: Message about the study creation
        '500':
          $ref: '#/components/responses/RangeError'


  /profiles/{profile_id}/singlecells/studies/{study_id}:
    get:
      tags:
        - Profile
      security:
        - app_id: []
      parameters:
       - $ref: '#/components/parameters/profile_id'
       - name: study_id
         in: path
         required: true
         description: The ID of the study to retrieve
         schema:
           type: string
           minimum: 1
       - in: query
         name: return_type
         required: false
         description: The format of the export file
         schema:
           type: string
           enum: [xlsx, jsonld]
      summary: Get list of studies within the profile
      description: |
        Get list of studies within the profile.
      responses:
        '200':
          description: Download an existing study by its ID
          content:
            application/json:
              schema:
                type: 'file'
        '500':
          $ref: '#/components/responses/RangeError'



  # Section: Statistics
  /stats/number_of_users:
    get:
      tags:
        - Statistics
      summary: Get number of registered COPO users
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'
        '500':
          $ref: '#/components/responses/RangeError'

  /stats/number_of_samples/{sample_type}:
    get:
      tags:
        - Statistics
      summary: Get the number of registered samples by sample type as well as by start date and end date
      description: |
        If no sample type is provided and no start date as well as end date are provided, COPO will return the total number of samples.
      parameters:
        - name: sample_type
          in: path
          schema:
            $ref: '#/components/schemas/SampleTypes'
        - name: d_from
          in: query
          description: ISO 8601 formatted full date-time, samples updated greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - name: d_to
          in: query
          description: ISO 8601 formatted full date-time, samples updated less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'
        '500':
          $ref: '#/components/responses/RangeError'

  /stats/tol_projects:
    get:
      tags:
        - Statistics
      summary: Get all Tree of Life (ToL) projects or main projects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of projects brokered through COPO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericOutputSchema'
        '500':
          $ref: '#/components/responses/RangeError'

  /stats/associated_tol_projects:
    get:
      tags:
        - Statistics
      summary: Get all associated Tree of Life (ToL) projects or subprojects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of all subprojects brokered through COPO. One or more of the subprojects listed are a part of a larger project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericOutputSchema'
        '400':
          description: Invalid project found in request
        '500':
          $ref: '#/components/responses/RangeError'

  # Section: TOL Mapping
  /mapping:
    get:
      tags:
        - Tree of Life (ToL) Mapping
      summary: >
        Retrieve a mapping of fields for the latest manifest version brokered through COPO, categorised by project and based on a recognised standard.
      description: >
        If no standard is provided, fields will be mapped to Tree of Life (ToL).
      parameters:
        - $ref: '#/components/parameters/project_required'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericOutputSchema'
        '400':
          description: Invalid request
        '500':
          $ref: '#/components/responses/RangeError'

components:
  parameters:
    associated_tol_project_query:
      name: associated_tol_project
      in: query
      description: |
        Get a list of samples in COPO by associated profile type

        - **BGE** - Biodiversity Genomics Europe (BGE)
        - **BIOBLITZ** - BioBlitz
        - **CBP** - Catalan Initiative for the Earth BioGenome Project (CBP)
        - **ERGA_COMMUNITY** - European Reference Genome Atlas - Community (ERGA_COMMUNITY)
        - **ERGA_PILOT** - European Reference Genome Atlas - Pilot (ERGA_PILOT)
        - **POP_GENOMICS** - Population Genomics (POP_GENOMICS)
      schema:
        $ref: '#/components/schemas/AssociatedProjects'

    associated_tol_project:
      name: value
      in: path
      description: |
        Get a list of samples in COPO by associated project type

        Associated project types:
        - **BGE** - Biodiversity Genomics Europe (BGE)
        - **BIOBLITZ** - BioBlitz
        - **CBP** - Catalan Initiative for the Earth BioGenome Project (CBP)
        - **ERGA_COMMUNITY** - European Reference Genome Atlas - Community (ERGA_COMMUNITY)
        - **ERGA_PILOT** - European Reference Genome Atlas - Pilot (ERGA_PILOT)
        - **POP_GENOMICS** - Population Genomics (POP_GENOMICS)
      required: true
      schema:
        $ref: '#/components/schemas/AssociatedProjects'

    associated_tol_project_multiple:
      name: values
      in: query
      description: |
        Get a list of samples in COPO by associated project type

        To query by multiple associated projects, hold **Ctrl** on Windows/Linux or 
        **Command** (⌘) (sometimes shown as **Cmd**) on Mac and click the desired 
        associated project type

        **Note**: A few records might match multiple associated projects even if  
        have entered just one. This is because the input is treated as a substring match, so 
        results could include records linked to more than one associated project.

        Associated project types:
        - **BGE** - Biodiversity Genomics Europe (BGE)
        - **BIOBLITZ** - BioBlitz
        - **CBP** - Catalan Initiative for the Earth BioGenome Project (CBP)
        - **ERGA_COMMUNITY** - European Reference Genome Atlas - Community (ERGA_COMMUNITY)
        - **ERGA_PILOT** - European Reference Genome Atlas - Pilot (ERGA_PILOT)
        - **POP_GENOMICS** - Population Genomics (POP_GENOMICS)
      required: true
      schema:
        $ref: '#/components/schemas/AssociatedProjects_multiple'

    copo_id:
      name: copo_id
      in: query
      description: If known, provide a hexadecimal 'copo_id'. To query multiple 'copo_id', separate them with a comma
      schema:
        type: string

    project:
      name: project
      in: query
      description: |
        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects'

    project_multiple:
      name: project
      in: query
      description: |
        To query by multiple project types, hold **Ctrl** on Windows/Linux or 
        **Command** (⌘) (sometimes shown as **Cmd**) on Mac and click the 
        desired project type

        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects_multiple'

    project_multiple_required:
      name: project
      in: query
      description: |
        To query by multiple project types, hold **Ctrl** on Windows/Linux or 
        **Command** (⌘) (sometimes shown as **Cmd**) on Mac and click the 
        desired project type

        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects_multiple'

    project_required:
      name: project
      in: query
      required: true
      description: |
        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects'

    profile_type:
      name: profile_type
      in: query
      required: true
      description: |
        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects'

    manifest_type:
      name: manifest_type
      in: query
      description: |
        Manifest types:
        - **ASG** - Aquatic Symbiosis Genomics (ASG)
        - **DTOL** - Darwin Tree of Life (DTOL)
        - **DTOLENV** - Darwin Tree of Life Environmental Samples (DTOLENV)
        - **ERGA** - European Reference Genome Atlas (ERGA)
      schema:
        $ref: '#/components/schemas/Projects'

    standard:
      name: standard
      in: query
      description: |
        - **dwc** - Darwin Core (DWC)
        - **ena** - European Nucleotide Archive (ENA)
        - **mixs** - Minimum Information about any (x) Sequence (MIxS)
        - **tol** - Tree of Life (ToL)
      schema:
        $ref: '#/components/schemas/Standards'

    return_type:
      name: return_type
      in: query
      description: Export data into selected format
      schema:
        $ref: '#/components/schemas/ReturnTypes'

    sequencing_centre:
      name: sequencing_centre
      in: query
      required: true
      description: A list of sequencing centres
      schema:
        $ref: '#/components/schemas/SequencingCentres'

    updatable_field:
      name: updatable_field
      in: query
      description: |
        A list of fields that can be updated by resubmitting a manifest for a project
      schema:
        $ref: '#/components/schemas/UpdatableFields'
  
    profile_id:
      name: profile_id
      in: path
      description: provide a hexadecimal 'profile_id'
      schema:
        type: string

  responses:
    RangeError:
      description: Call stack size exceeded - occurs only in Swagger UI. Try direct request.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
          example:
            error: "RangeError: Maximum call stack size exceeded. Please run the API URL directly in the browser: https://copo-project.org/api/some-path. Replace 'some-path' with the actual path and parameter(s) (if applicable) you were trying to access."

  securitySchemes:
    app_id:
      type: apiKey
      description: API key to authorize requests.
      name: 'Authorization'
      in: header

  schemas:
    AccessionListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/StudyAccession'

    AssociatedProjects:
      type: string
      enum: [BGE, BIOBLITZ, CBP, ERGA_COMMUNITY, ERGA_PILOT, POP_GENOMICS]
      description: A list of associated projects

    AssociatedProjects_multiple:
      type: array
      items:
        type: string
        enum: [BGE, BIOBLITZ, CBP, ERGA_COMMUNITY, ERGA_PILOT, POP_GENOMICS]
      explode: true # Ensures multiple values are passed correctly
      description: Select one or more associated projects 

    AuthBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    GenericOutputSchema:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            type: string

    ManifestId:
      type: string
      format: uuid

    ManifestList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/ManifestId'

    ManifestVersions:
      type: string
      enum: ['2.5.1', '2.5', '2.4.3', '2.4.2', '2.4.1', '2.4']

    Profile:
      type: object
      properties:
        profile_id:
          type: string
        title:
          type: string
        tol_type:
          type: string
        associated_tol_type:
          type: string

    GenomicProfile:
      type: object
      properties:
        profile_id:
          type: string
        title:
          type: string
        description:
          type: string
        type:
          type: string
        id:
          type: string
          format: uuid


    ProfileTubeOrWellIDAssociationList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProfileTubeOrWellIDAssociation'

    ProfileTubeOrWellIDAssociation:
      properties:
        TUBE_OR_WELL_IDs:
          type: array
          items:
            type: string
        associated_profile_type:
          type: array
          items:
            type: string
        first_manifest_date_created:
          type: string
          format: date-time
        last_manifest_date_created:
          type: string
          format: date-time
        profile_title:
          type: string
        profile_type:
          type: string

    Projects:
      type: string
      enum: [ASG, DTOL, DTOLENV, ERGA]
      description: Projects or manifest types brokered through COPO

    Projects_multiple:
      type: array
      items:
        type: string
        enum: [ASG, DTOL, DTOLENV, ERGA]
      explode: true # Ensures multiple values are passed correctly
      style: form
      description: Select one or more of the projects or manifest types brokered through COPO

    ReturnTypes:
      type: string
      enum: [csv, json]

    ReturnTypes_with_rocrate:
      type: string
      enum: [csv, json, rocrate]

    SampleAccession:
      properties:
        accessions:
          type: object
          properties:
            study_accessions:
              type: object
              properties:
                bioProjectAccession:
                  type: string
                sraStudyAccession:
                  type: string
                submissionAccession:
                  type: string
                status:
                  type: string
            sample_accessions:
              type: array
              items:
                $ref: '#/components/schemas/SimpleSampleAccession'

    SampleAccessionList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SampleAccession'

    SampleAudit_field_query_options:
      type: string
      enum:
        [
          RACK_OR_PLATE_ID,
          SPECIMEN_ID,
          TUBE_OR_WELL_ID,
          biosampleAccession,
          public_name,
          sraAccession,
        ]

    SampleAudit_update_log:
      type: object
      properties:
        field:
          type: string
        outdated_value:
          type: string
        updated_value:
          type: string
        update_type:
          type: string
        time_updated:
          type: string
          format: date-time
        RACK_OR_PLATE_ID:
          type: string
        SPECIMEN_ID:
          type: string
        TUBE_OR_WELL_ID:
          type: string
        biosampleAccession:
          type: string
        copo_audit_type:
          type: string
        copo_id:
          type: string
        copo_profile_title:
          type: string
        manifest_id:
          type: string
          format: uuid
        public_name:
          type: string
        sraAccession:
          type: string
        tol_project:
          type: string

    SampleList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_long'

    SampleListByManifestVersion:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        number_of_fields:
          type: string
        fields:
          type: array
          items:
            type: string

    SampleListByManifestVersionError:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        status:
          type: object
          properties:
            error:
              type: string
            error_details:
              type: string

    SampleListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_very_short'

    SampleStatus:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_short'

    SampleTypes:
      type: string
      enum: [asg, dtol, dtolenv, erga]
      description: Sample types brokered through COPO

    Sample_long:
      type: object
      properties:
        SERIES:
          type: string
        RACK_OR_PLATE_ID:
          type: string
        TUBE_OR_WELL_ID:
          type: string
        SPECIMEN_ID:
          type: string
        LIFESTAGE:
          type: string
        SEX:
          type: string
        ORGANISM_PART:
          type: string
        GAL:
          type: string
        GAL_SAMPLE_ID:
          type: string
        COLLECTOR_SAMPLE_ID:
          type: string
        COLLECTED_BY:
          type: string
        COLLECTOR_AFFILIATION:
          type: string
        DATE_OF_COLLECTION:
          type: string
        COLLECTION_LOCATION:
          type: string
        DECIMAL_LATITUDE:
          type: string
        HABITAT:
          type: string
        DESCRIPTION_OF_COLLECTION_METHOD:
          type: string
        EASE_OF_SPECIMEN_COLLECTION:
          type: string
        IDENTIFIED_BY:
          type: string
        IDENTIFIER_AFFILIATION:
          type: string
        IDENTIFIED_HOW:
          type: string
        SPECIMEN_IDENTITY_RISK:
          type: string
        PRESERVED_BY:
          type: string
        PRESERVER_AFFILIATION:
          type: string
        PRESERVATION_APPROACH:
          type: string
        TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION:
          type: string
        DATE_OF_PRESERVATION:
          type: string
          format: date
        SIZE_OF_TISSUES_IN_TUBE:
          type: string
        TISSUE_REMOVED_FROM_BARCODING:
          type: string
        PLATE_ID_FOR_BARCODING:
          type: string
        TUBE_OR_WELL_ID_FOR_BARCODING:
          type: string
        TISSUE_FOR_BARCODING:
          type: string
        BARCODE_PLATE_PRESERVATIVE:
          type: string
        PURPOSE_OF_SPECIMEN:
          type: string
        HAZARD_GROUP:
          type: string
        REGULATORY_COMPLIANCE:
          type: string
        BOLD_ACCESSION_NUMBER:
          type: string
        VOUCHER_ID:
          type: string
        RELATIONSHIP:
          type: string
        GRID_REFERENCE:
          type: string
        DEPTH:
          type: string
        ELEVATION:
          type: string
        TIME_OF_COLLECTION:
          type: string
        PRESERVATIVE_SOLUTION:
          type: string
        SIZE_OF_TISSUE_IN_TUBE:
          type: string
        TISSUE_REMOVED_FOR_BARCODING:
          type: string
        OTHER_INFORMATION:
          type: string
        BARCODE_HUB:
          type: string
        ORIGINAL_GEOGRAPHIC_LOCATION:
          type: string
        ORIGINAL_COLLECTION_DATE:
          type: string
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string
        associated_tol_project:
          type: string
        biosampleAccession:
          type: string
        copo_id:
          type: string
        copo_profile_title:
          type: string
        last_bioimage_submitted:
          type: string
        manifest_id:
          type: string
          format: uuid
        manifest_version:
          type: string
        public_name:
          type: string
        sampleDerivedFrom:
          type: string
        sampleSameAs:
          type: string
        sampleSymbiontOf:
          type: string
        status:
          type: string
        sraAccession:
          type: string
        submissionAccession:
          type: string
        time_created:
          type: string
          format: date-time
        time_updated:
          type: string
          format: date-time
        tol_project:
          type: string

    Sample_long2:
      type: string
      enum:
        [
          'ASSOCIATED_PROJECT_ACCESSIONS',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_PROJECT_ID',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_RIGHTS_APPLICABLE',
          'BARCODE_HUB',
          'BARCODE_PLATE_PRESERVATIVE',
          'BARCODING_STATUS',
          'BIOBANKED_TISSUE_PRESERVATIVE',
          'BOLD_ACCESSION_NUMBER',
          'COLLECTED_BY',
          'COLLECTION_LOCATION',
          'COLLECTOR_AFFILIATION',
          'COLLECTOR_SAMPLE_ID',
          'COMMON_NAME',
          'CULTURE_OR_STRAIN_ID',
          'DATE_OF_COLLECTION',
          'DATE_OF_PRESERVATION',
          'DECIMAL_LATITUDE',
          'DECIMAL_LONGITUDE',
          'DEPTH',
          'DESCRIPTION_OF_COLLECTION_METHOD',
          'DIFFICULT_OR_HIGH_PRIORITY_SAMPLE',
          'DNA_REMOVED_FOR_BIOBANKING',
          'DNA_VOUCHER_ID_FOR_BIOBANKING',
          'ELEVATION',
          'ETHICS_PERMITS_DEF',
          'ETHICS_PERMITS_FILENAME',
          'ETHICS_PERMITS_REQUIRED',
          'FAMILY',
          'GAL',
          'GAL_SAMPLE_ID',
          'GENUS',
          'GRID_REFERENCE',
          'HABITAT',
          'HAZARD_GROUP',
          'IDENTIFIED_BY',
          'IDENTIFIED_HOW',
          'IDENTIFIER_AFFILIATION',
          'INDIGENOUS_RIGHTS_DEF',
          'INFRASPECIFIC_EPITHET',
          'LATITUDE_END',
          'LATITUDE_START',
          'LIFESTAGE',
          'LONGITUDE_END',
          'LONGITUDE_START',
          'MIXED_SAMPLE_RISK',
          'NAGOYA_PERMITS_DEF',
          'NAGOYA_PERMITS_FILENAME',
          'NAGOYA_PERMITS_REQUIRED',
          'ORDER_OR_GROUP',
          'ORGANISM_PART',
          'ORIGINAL_COLLECTION_DATE',
          'ORIGINAL_DECIMAL_LATITUDE',
          'ORIGINAL_DECIMAL_LONGITUDE',
          'ORIGINAL_GEOGRAPHIC_LOCATION',
          'OTHER_INFORMATION',
          'PARTNER',
          'PARTNER_SAMPLE_ID',
          'PLATE_ID_FOR_BARCODING',
          'PRESERVATION_APPROACH',
          'PRESERVATIVE_SOLUTION',
          'PRESERVED_BY',
          'PRESERVER_AFFILIATION',
          'PRIMARY_BIOGENOME_PROJECT',
          'PROXY_TISSUE_VOUCHER_ID_FOR_BIOBANKING',
          'PROXY_VOUCHER_ID',
          'PROXY_VOUCHER_LINK',
          'PURPOSE_OF_SPECIMEN',
          'RACK_OR_PLATE_ID',
          'REGULATORY_COMPLIANCE',
          'RELATIONSHIP',
          'SAMPLE_COORDINATOR',
          'SAMPLE_COORDINATOR_AFFILIATION',
          'SAMPLE_FORMAT',
          'SAMPLING_PERMITS_DEF',
          'SAMPLING_PERMITS_FILENAME',
          'SAMPLING_PERMITS_REQUIRED',
          'SCIENTIFIC_NAME',
          'SERIES',
          'SEX',
          'SIZE_OF_TISSUE_IN_TUBE',
          'SPECIMEN_ID',
          'SPECIMEN_IDENTITY_RISK',
          'SYMBIONT',
          'TAXON_REMARKS',
          'TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION',
          'TIME_OF_COLLECTION',
          'TISSUE_FOR_BARCODING',
          'TISSUE_FOR_BIOBANKING',
          'TISSUE_REMOVED_FOR_BARCODING',
          'TISSUE_REMOVED_FOR_BIOBANKING',
          'TISSUE_VOUCHER_ID_FOR_BIOBANKING',
          'TUBE_OR_WELL_ID',
          'TUBE_OR_WELL_ID_FOR_BARCODING',
          'VOUCHER_ID',
          'VOUCHER_INSTITUTION',
          'VOUCHER_LINK',
          'copo_profile_title',
          'manifest_version',
          'public_name',
          'sampleDerivedFrom',
          'sampleSameAs',
          'sampleSymbiontOf',
          'sraAccession',
          'status',
          'submissionAccession',
          'time_created',
          'time_updated',
          'tol_project',
        ]
      description: Fields that are associated with a sample record in COPO

    Sample_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample
        manifest_id:
          type: string
          format: uuid
          description: unique identifier for manifest in which this sample appears
        manifest_version:
          type: string
          description: version number of the manifest used
        status:
          type: string
          description: status of this sample. "pending" means waiting for supervisor approval, "accepted" means supervisor approval gained, "rejected" means supervisor rejected
        time_created:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO
        time_updated:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO

    Sample_very_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample

    SamplesWithSubmittedBioimages:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SamplesWithSubmittedBioimagesList'

    SamplesWithSubmittedBioimagesList:
      properties:
        SPECIMEN_ID:
          type: string
          format: string
        TAXON_ID:
          type: string
          format: string
        copo_id:
          type: string
        copo_profile_title:
          type: string
        last_bioimage_submitted:
          type: string
          format: date-time
        sampleDerivedFrom:
          type: string
        sampleSameAs:
          type: string
        sampleSymbiontOf:
          type: string
        status:
          type: string
        tol_project:
          type: string

    SimpleSampleAccession:
      type: object
      properties:
        biosampleAccession:
          type: string
        sraAccession:
          type: string
        submissionAccession:
          type: string
        status:
          type: string
        copo_sample_id:
          type: string

    SequencingCentres:
      type: string
      enum:
        [
          CENTRO NACIONAL DE ANÁLISIS GENÓMICO,
          'DNA SEQUENCING AND GENOMICS LABORATORY, HELSINKI GENOMICS CORE FACILITY',
          EARLHAM INSTITUTE,
          FUNCTIONAL GENOMIC CENTER ZURICH,
          GENOSCOPE,
          'HANSEN LAB, DENMARK',
          INDUSTRY PARTNER,
          LAUSANNE GENOMIC TECHNOLOGIES FACILITY,
          'LEIBNIZ INSTITUTE FOR THE ANALYSIS OF BIODIVERSITY CHANGE, MUSEUM KOENIG, BONN',
          'NEUROMICS SUPPORT FACILITY, UANTWERP, VIB',
          NGS BERN,
          NGS COMPETENCE CENTER TÜBINGEN,
          NORWEGIAN SEQUENCING CENTRE,
          OTHER,
          SANGER INSTITUTE,
          SCILIFELAB,
          'SVARDAL LAB, ANTWERP',
          UNIVERSITY OF BARI,
          UNIVERSITY OF FLORENCE,
          WEST GERMAN GENOME CENTRE,
        ]
      description: A list of sequencing centres

    SpeciesList:
      type: object
      properties:
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string

    Standards:
      type: string
      enum: [dwc, ena, mixs, tol]

    StatsNumber:
      type: object
      properties:
        number_found:
          type: integer

    StudyAccession:
      type: object
      properties:
        bioProjectAccession:
          type: string
          description: Bioproject identifier
        sraStudyAccession:
          type: string
          description: SRA identifier for Study
        submissionAccession:
          type: string
          description: Submission identifier for Study
        status:
          type: string
          description: accepted / rejected status
        sample_biosampleId:
          type: string
          description: Queried for sample biosample id

    UpdatableFields:
      type: string
      enum:
        [
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_CONTACT,
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_PROJECT_ID,
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_RIGHTS_APPLICABLE,
          BARCODE_HUB,
          BARCODE_PLATE_PRESERVATIVE,
          BARCODING_STATUS,
          BIOBANKED_TISSUE_PRESERVATIVE,
          BOLD_ACCESSION_NUMBER,
          COLLECTED_BY,
          COLLECTION_LOCATION,
          COLLECTOR_AFFILIATION,
          COLLECTOR_SAMPLE_ID,
          COMMON_NAME,
          CULTURE_OR_STRAIN_ID,
          DATE_OF_COLLECTION,
          DATE_OF_PRESERVATION,
          DECIMAL_LATITUDE,
          DECIMAL_LONGITUDE,
          DEPTH,
          DESCRIPTION_OF_COLLECTION_METHOD,
          DIFFICULT_OR_HIGH_PRIORITY_SAMPLE,
          DNA_REMOVED_FOR_BIOBANKING,
          DNA_VOUCHER_ID_FOR_BIOBANKING,
          ELEVATION,
          ETHICS_PERMITS_DEF,
          ETHICS_PERMITS_FILENAME,
          ETHICS_PERMITS_REQUIRED,
          FAMILY,
          GAL,
          GAL_SAMPLE_ID,
          GENUS,
          HABITAT,
          HAZARD_GROUP,
          IDENTIFIED_BY,
          IDENTIFIED_HOW,
          IDENTIFIER_AFFILIATION,
          INDIGENOUS_RIGHTS_DEF,
          INFRASPECIFIC_EPITHET,
          LIFESTAGE,
          NAGOYA_PERMITS_DEF,
          NAGOYA_PERMITS_FILENAME,
          NAGOYA_PERMITS_REQUIRED,
          ORDER_OR_GROUP,
          ORGANISM_PART,
          ORIGINAL_COLLECTION_DATE,
          ORIGINAL_GEOGRAPHIC_LOCATION,
          OTHER_INFORMATION,
          PARTNER_SAMPLE_ID,
          PLATE_ID_FOR_BARCODING,
          PRESERVATION_APPROACH,
          PRESERVATIVE_SOLUTION,
          PRESERVED_BY,
          PRESERVER_AFFILIATION,
          PROXY_TISSUE_VOUCHER_ID_FOR_BIOBANKING,
          PROXY_VOUCHER_ID,
          PROXY_VOUCHER_LINK,
          PURPOSE_OF_SPECIMEN,
          REGULATORY_COMPLIANCE,
          RELATIONSHIP,
          SAMPLE_COORDINATOR,
          SAMPLE_COORDINATOR_AFFILIATION,
          SAMPLING_PERMITS_FILENAME,
          SAMPLING_PERMITS_REQUIRED,
          SCIENTIFIC_NAME,
          SEX,
          SIZE_OF_TISSUE_IN_TUBE,
          SPECIMEN_IDENTITY_RISK,
          TAXON_ID,
          TAXON_REMARKS,
          TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION,
          TIME_OF_COLLECTION,
          TISSUE_FOR_BARCODING,
          TISSUE_FOR_BIOBANKING,
          TISSUE_REMOVED_FOR_BARCODING,
          TISSUE_REMOVED_FOR_BIOBANKING,
          TISSUE_VOUCHER_ID_FOR_BIOBANKING,
          TUBE_OR_WELL_ID_FOR_BARCODING,
          VOUCHER_ID,
          VOUCHER_INSTITUTION,
          VOUCHER_LINK,
        ]
      description: Fields that can be updated in COPO

    File:
      type: object
      properties:
        file_name:
          type: string
        size_in_bytes:
          type: number
        last_uploaded:
          type: string
          format: date-time
        S3_ETag: 
          type: string
    
    PresignedUrl:
      type: object
      properties:
        file_name:
          type: string
        url:
          type: string

    Study:
      type: object

    Checklist:
      type: object
      properties:
        checklist_id:
          type: string
          description: Unique identifier for the checklist
        name:
          type: string
          description: Name of the checklist
        description:
          type: string
          description: Description of the checklist
        standard:
          type: string
          description: Standard used for the checklist (e.g., dwc, tol)
        technology:
          type: string
          description: Technology used for the checklist (e.g., DNA barcoding, genomics)
        
 

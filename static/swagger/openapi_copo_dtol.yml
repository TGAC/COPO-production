openapi: 3.0.0
info:
  title: COPO API
  description: |
    The following are Swagger Application Programming Interface (API) methods for audits, 
    manifests, samples, profiles, statistics and Tree of Life (ToL) fields mapping.

    Please view our [API methods' documentation](https://copo-docs.readthedocs.io/en/latest/retrieval/copo-api.html) for guidance.

  version: 1.1.8
servers:
  - url: /api
    description: Current Website Server

paths:
  # Section: API key
  /apiKey/:
    post:
      tags:
        - API Key
      summary: Obtain API Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema: # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Username and Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBody'

  # Section: Audit
  /audit/sample/{from}/{to}:
    get:
      tags:
        - Audit
      summary: Get update audit for sample records between dates
      description: >
        Returns an array of sample objects updated between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples updated greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples updated less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: \'from\' must be earlier than \'to\'
        '500':
          description: No audits found

  /audit/sample/manifest_id/{manifest_id}:
    get:
      tags:
        - Audit
      summary: Get update audit for sample records by manifest ID
      description: |
        Get a list of sample update records in COPO by manifest ID.

        If manifest_id is not provided, COPO will return a list of all sample updates.
      parameters:
        - name: manifest_id
          in: path
          description: If known, provide a uuid 'manifest_id'. To query multiple 'manifest_id', separate them with a comma.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'

  /audit/sample/copo_id/{copo_id}:
    get:
      tags:
        - Audit
      summary: Get update audit for sample records by copo_id
      description: |
        Get a list of sample update records in COPO by copo ID.

        If copo_id is not provided, COPO will return a list of all sample updates.
      parameters:
        - name: copo_id
          in: path
          description: If known, provide a hexadecimal 'copo_id'. To query multiple 'copo_id', separate them with a comma.
          required: false
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'

  /audit/sample/update_type/{update_type}:
    get:
      tags:
        - Audit
      summary: Get update audit for samples by 'update_type'
      description: |
        Get sample update audit records based on the type of person who performed the audit.

        If no 'sample_type' is provided, COPO will return a list of sample updates for all sample types.
      parameters:
        - name: sample_type
          in: query
          description: To query multiple sample types, separate them with a comma. Supported sample types - ASG, DTOL, ERGA
          schema:
            type: string
            pattern: '^([a-zA-Z_,]+)+$'
            format:
            minimum: 1
        - name: update_type
          in: path
          required: true
          description: The type of person who performed the audit
          schema:
            type: string
            enum: [system, user]
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: Invalid sample type found in request

  /audit/sample/{field}/{field_value}:
    get:
      tags:
        - Audit
      summary: Get update audit for samples by 'RACK_OR_PLATE_ID', 'SPECIMEN_ID', 'TUBE_OR_WELL_ID', 'biosampleAccession', 'public_name' or 'sraAccession' field
      description: |
        Get sample update audit records by 'RACK_OR_PLATE_ID' field, 'SPECIMEN_ID' field, 'TUBE_OR_WELL_ID' field, 'biosampleAccession' field, 'public_name' field or 'sraAccession' field.

        COPO will return a list of sample updates if updates were done a sample that matches the desired field with the value provided.
      parameters:
        - name: field
          in: path
          required: true
          description: A list of field options to query sample updates by
          schema:
            $ref: '#/components/schemas/SampleAudit_field_query_options'
        - name: field_value
          in: path
          required: true
          description: The value of the field to query sample updates by
          schema:
            type: string
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample update objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAudit_update_log'
        '400':
          description: Invalid value found in request

  /audit/sample/asg:
    get:
      tags:
        - Audit
      summary: Get update audit for 'ASG' sample records by an updatable field
      description: >
        If no 'copo_id' is provided, COPO will return a list of updates for the Aquatic Symbiosis Genomics (ASG) sample type for all updatable fields if an update was done on it
      parameters:
        - name: copo_id
          in: query
          description: If known, provide a hexadecimal 'copo_id'. To query multiple 'copo_id', separate them with a comma
          schema:
            type: string
            minimum: 1
        - in: query
          name: updatable_field
          required: true
          schema:
            $ref: '#/components/schemas/UpdatableFields_ASG'
          description: A list of fields that can be updated for 'ASG' sample types
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array of the latest manifest version for a given project type

  /audit/sample/dtol:
    get:
      tags:
        - Audit
      summary: Get update audit for 'DTOL' sample records by an updatable field
      description: >
        If no 'copo_id' is selected, COPO will return a list of updates for the Darwin Tree of Life (DTOL) sample type for all updatable fields if an update was done on it
      parameters:
        - name: copo_id
          in: query
          description: If known, provide a hexadecimal 'copo_id'. To query multiple 'copo_id', separate them with a comma
          schema:
            type: string
            minimum: 1
        - in: query
          name: updatable_field
          required: true
          schema:
            $ref: '#/components/schemas/UpdatableFields_DTOL'
          description: A list of fields that can be updated for 'DTOL' sample types
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array of the latest manifest version for a given project type

  /audit/sample/erga:
    get:
      tags:
        - Audit
      summary: Get update audit for 'ERGA' sample records by an updatable field
      description: >
        If no 'copo_id' is provided, COPO will return a list of updates for the European Reference Genome Atlas (ERGA) sample type for the desired field if an update was done on it
      parameters:
        - name: copo_id
          in: query
          description: If known, provide a hexadecimal 'copo_id'. To query multiple 'copo_id', separate them with a comma
          schema:
            type: string
            minimum: 1
        - in: query
          name: updatable_field
          required: true
          schema:
            $ref: '#/components/schemas/UpdatableFields_ERGA'
          description: A list of fields that can be updated for 'ERGA' sample types
        - name: copo_id
          in: query
          description: A hexadecimal 'copo_id'
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array of the latest manifest version for a given project type

  # Section: Manifest
  /manifest:
    get:
      tags:
        - Manifest
      summary: Get all manifests
      description: >
        COPO will return a list of manifest ids
      parameters:
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'

  /manifest/sequencing_centre:
    get:
      tags:
        - Manifest
      summary: Get all manifests by sequencing centre
      description: >
        COPO will return a list of manifest ids based on the given sequencing_centre
      parameters:
        - $ref: '#/components/parameters/sequencing_centre'
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'

  /manifest/current_version:
    get:
      tags:
        - Manifest
      summary: Get current manifest version
      description: >
        If no manifest type is provided, COPO will return a list of projects brokered with the latest manifest version of each project.
      parameters:
        - in: query
          name: manifest_type
          schema:
            $ref: '#/components/schemas/ManifestTypes'
        - $ref: '#/components/parameters/return_type'
      responses:
        200:
          description: A JSON array of the latest manifest version for a given project type

  /manifest/{manifest_id}:
    get:
      tags:
        - Manifest
      summary: Get samples in manifest
      description: >
        Get full sample information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - name: return_type
          in: query
          description: Export data into selected format
          schema:
            $ref: '#/components/schemas/ReturnTypes_with_rocrate'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: invalid manifest_id

  /manifest/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\'

  /manifest/{project}/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids of a project between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to} in project {project}
      parameters:
        - name: project
          in: path
          required: true
          description: a comma separate list of supported EBP projects in lower case (dtol|asg|dtolenv|erga)
          schema:
            type: string
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\ and project must be in the list of supported projects'

  /manifest/{manifest_id}/sample_status:
    get:
      tags:
        - Manifest
      summary: Get status of samples in manifest
      description: >
        Get minimal sample status information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample status objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleStatus'
        '400':
          description: invalid manifest_id

  /manifest/validate:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - profile_id
                - manifest
              type: object
              properties:
                profile_id:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: id of queued validation report to be queried

  /manifest/validate/report:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - validation_report_id
              properties:
                validation_report_id:
                  type: string
      responses:
        '200':
          description: status and/or validation errors for given manifest validation

  /manifest/validations:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      responses:
        '200':
          description: validations for authorised user

  # Section: Sample
  /sample/{project}:
    get:
      tags:
        - Sample
      summary: Get copo_ids of sample records within a project
      description: >
        Get a list of copo IDs of samples within a project in COPO
      parameters:
        - name: project
          in: path
          required: true
          description: Format - a comma separated list of supported projects. Supported projects - ASG, DTOL, ERGA
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample copo_ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListShort'
        '400':
          description: InvalidId found in request

        '404':
          description: Invalid project found in request. No sample records exist for the given project.

  /sample/associated_tol_project/{values}:
    get:
      tags:
        - Sample
      summary: Get sample records in a project by associated project type(s)
      description: |
        Get a list of all samples of a project in COPO by associated project type
        Available associated projects - **ASG**, **BGE**, **DTOL**, **dtolenv**, **ERGA**, **ERGA_PILOT**, **ERGA_SATELLITES**, **POP_GENOMICS**

        To query multiple associated projects, separate them with a comma.

        - **ASG** refers to Aquatic Symbiosis Genomics (ASG)
        - **BGE** refers to Darwin Tree of Life (DTOL)
        - **DTOL** refers to Darwin Tree of Life (DTOL)
        - **dtolenv** refers to Darwin Tree of Life (DTOL)
        - **ERGA** refers to European Reference Genome Atlas (ERGA)
        - **ERGA_PILOT** refers to uropean Reference Genome Atlas - Pilot (ERGA_PILOT)
        - **ERGA_SATELLITES** refers to European Reference Genome Atlas - Satellites (ERGA_SATELLITES)
        - **POP_GENOMICS** refers to Population Genomics (POP_GENOMICS)

        For example, to query all associated Tree of Life (ToL) projects, input: ASG,BGE,DTOL,dtolenv,ERGA,ERGA_PILOT,ERGA_SATELLITES,POP_GENOMICS
      parameters:
        - name: values
          in: path
          required: true
          description: comma (,) separated list of supported associated project types
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: Invalid associated profile type found in request

        '404':
          description: Invalid associated project type found in request. No sample records exist for the given associated project.

  /sample/project/manifest_version/fields:
    get:
      tags:
        - Sample
      summary: Get project fields by manifest version
      description: |
        Get a list of fields of a project for a given manifest version.

        - If project type is provided and no manifest version is provided, COPO will return a list of fields for the given project type according to the latest manifest version for that project.

        - If no project type is provided and manifest version is provided, COPO will return a list of fields for the given project type that matches the given manifest version.

        - If no project type and no manifest version are provided, COPO will return a list of fields for all projects according to the latest manifest version for that project.
      parameters:
        - name: project
          in: query
          schema:
            $ref: '#/components/schemas/ManifestTypes'
        - name: manifest_version
          in: query
          schema:
            $ref: '#/components/schemas/ManifestVersions'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of fields for a given manifest version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersion'

        '400':
          description: Invalid manifest version found in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersionError'

  /sample/{from}/{to}:
    get:
      tags:
        - Sample
      summary: Get sample records between dates
      description: >
        Returns an array of sample objects submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: \'from\' must be earlier than \'to\'

  /sample/updatable_fields/{project}:
    get:
      tags:
        - Sample
      summary: Get fields that can be updated by resubmitting a manifest in a project
      description: >
        Get a list of all the fields of a project that can be updated in COPO
      parameters:
        - name: project
          in: path
          required: true
          description: |
            Available projects - **ASG**, **DTOL**, **ERGA**

            To query multiple projects, separate them with a comma.

            - **ASG** refers to Aquatic Symbiosis Genomics (ASG)
            - **DTOL** refers to Darwin Tree of Life (DTOL)
            - **ERGA** refers to European Reference Genome Atlas (ERGA)

            For example, to query all projects, input: ASG,DTOL,ERGA
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of updatable sample fields

        '400':
          description: Invalid project found in request

        '401':
          description: No updatable fields found for given project

        '500':
          description: No samples exist for given project(s)

  /sample/copo_id/{copo_ids}:
    get:
      tags:
        - Sample
      summary: Get sample records by copo_id
      description: >
        Get full sample information for the samples returned from the given {copo_ids}. In public repositories, "copo_id" is referred to as "alias".
      parameters:
        - name: copo_ids
          in: path
          required: true
          description: hexadecimal sample ids, separated by commas
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: InvalidId found in request

  /sample/biosampleAccession/{biosampleAccessions}:
    get:
      tags:
        - Sample
      summary: Get sample records by biosampleAccession
      description: >
        Get full sample information for the samples returned from the given {biosampleAccessions}
      parameters:
        - name: biosampleAccessions
          in: path
          required: true
          description: Biosample accessions created by European Nucleotide Archive (ENA), separated by commas
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'

  /sample/sample_field/{field}/{values}:
    get:
      tags:
        - Sample
      summary: Get sample records by field and value(s)
      description: >
        Get full sample information for the samples returned from the given {field} / {values}
      parameters:
        - name: field
          in: path
          required: true
          description: a known sample field to search for
          schema:
            $ref: '#/components/schemas/Sample_long2'
        - name: values
          in: path
          required: true
          description: Format - a comma separated list of values to look for
          schema:
            type: string
            minimum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'

  /sample/sequencing_centre:
    get:
      tags:
        - Sample
      summary: Get sample records by sequencing centre
      description: >
        Get full sample information for the samples returned based on the given sequencing_centre
      parameters:
        - $ref: '#/components/parameters/sequencing_centre'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'

  /sample/StudyFromSampleAccession/{sample_ids}:
    get:
      tags:
        - Sample
      summary: Get study records by sample accessions
      description: >
        Get study information for the samples returned from the given {sample_ids}
      parameters:
        - name: sample_ids
          in: path
          required: true
          description: Format - a comma separated list of biosample accessions or European Nucleotide Archive (ENA)/sraAccessions
          schema:
            type: string
            minimum: 1
            maximum: 1
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessionListShort'

  /sample/SampleFromStudyAccession/{biostudyAccessions}:
    get:
      tags:
        - Sample
      summary: Get samples by biostudyAccessions
      description: >
        Get accession information for the samples returned from the given {biostudyAccessions}
      parameters:
        - name: biostudyAccessions
          in: path
          required: true
          description: Format - a comma separated list of biostudy accessions
          schema:
            type: string
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAccessionList'

  # Section: Profile
  /profile/make_profile:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Make a profile for authenticated user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - title
                - description
                - profile_type
              properties:
                title: # <!--- form field name
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                profile_type:
                  type: string
                  enum:
                    [
                      'Stand-alone',
                      'Darwin Tree of Life (DTOL)',
                      'Darwin Tree of Life Environmental Samples (dtolenv)',
                      'Aquatic Symbiosis Genomics (ASG)',
                      'European Reference Genome Atlas (ERGA)',
                    ]
                  required: true
      responses:
        '200':
          description: representation of the created profile

  /profile/get_for_user:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Get profile records for authenticated user
      responses:
        '200':
          description: representation of the created profile

  # Section: Statistics
  /stats/number_of_users:
    get:
      tags:
        - Statistics
      summary: Get number of registered COPO users
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'

  /stats/number_of_samples/{sample_type}:
    get:
      tags:
        - Statistics
      summary: Get the number of registered samples by sample type as well as by start date and end date
      description: |
        If no sample type is provided and no start date as well as end date are provided, COPO will return the total number of samples.
      parameters:
        - name: sample_type
          in: path
          schema:
            $ref: '#/components/schemas/SampleTypes'
        - name: d_from
          in: query
          description: ISO 8601 formatted full date-time, samples updated greater than or equal to this date will be matched, e.g. 2023-09-01T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
        - name: d_to
          in: query
          description: ISO 8601 formatted full date-time, samples updated less than this date will be matched, e.g. 2023-09-30T00:00:00+00:00
          schema:
            type: string
            pattern: '^([A-Z0-9a-f- .:+]+)+$'
            format: date-time
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'

  /stats/tol_projects:
    get:
      tags:
        - Statistics
      summary: Get all Tree of Life (ToL) projects or main projects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of projects brokered through COPO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'

  /stats/associated_tol_projects:
    get:
      tags:
        - Statistics
      summary: Get all associated Tree of Life (ToL) projects or subprojects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of all subprojects brokered through COPO. One or more of the subprojects listed are a part of a larger project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'
        '400':
          description: Invalid project found in request

        '500':
          description: No samples exist for given project(s)

  # Section: TOL Mapping
  /mapping:
    get:
      tags:
        - Tree of Life (ToL) Mapping
      summary: >
        Get a mapping of ToL manifest fields brokered through COPO 
        by DWC standard, MIxS standard or ENA standard
      description: >
        If no standard is provided, COPO will return a list of mapping of Tree of Life (ToL) fields to Darwin Core (DWC) standard, 
        Minimum Information about any (X) Sequence (MIxS) standard and European Nucleotide Archive (ENA) standard.
      parameters:
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'
        '400':
          description: Invalid mapping type found in request

        '500':
          description: No mapping exist for the given mapping type

  /mapping/manifest_type/{manifest_type}:
    get:
      tags:
        - Tree of Life (ToL) Mapping
      summary: >
        Get a mapping of ToL fields by manifest type - ASG, DTOL, DTOLENV or ERGA
        to DWC fields, MIxS fields and ENA fields
      description: >
        COPO will return a list of mapping for one of the manifests project types - Aquatic Symbiosis Genomics (ASG), 
        Darwin Tree of Life (DTOL), Darwin Tree of Life Environmental Samples (DTOLENV) or European Reference Genome Atlas (ERGA)
        to Darwin Core (DWC) fields, Minimum Information about any (X) Sequence (MIxS) fields and European Nucleotide Archive (ENA) fields
      parameters:
        - in: path
          name: manifest_type
          required: true
          schema:
            $ref: '#/components/schemas/ManifestTypes'
        - $ref: '#/components/parameters/standard'
        - $ref: '#/components/parameters/return_type'
      responses:
        '200': # status code
          description: A JSON array of mapping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'
        '400':
          description: Invalid mapping type found in request

        '500':
          description: No mapping exist for the given mapping type

components:
  parameters:
    standard:
      name: standard
      in: query
      description: |
        Available standards - **dwc**, **ena**, **mixs**, **tol**

        To query multiple standards, separate them with a comma.

        - **dwc** refers to Darwin Core (DWC)
        - **ena** refers to European Nucleotide Archive (ENA)
        - **mixs** refers to Minimum Information about any (x) Sequence (MIxS)
        - **tol** refers to Tree of Life (ToL)

        For example, to query all standards, input: dwc,ena,mixs,tol
      schema:
        type: string

    return_type:
      name: return_type
      in: query
      description: Export data into selected format
      schema:
        $ref: '#/components/schemas/ReturnTypes'

    sequencing_centre:
      name: sequencing_centre
      in: query
      required: true
      description: A list of sequencing centres
      schema:
        $ref: '#/components/schemas/SequencingCentres'

  securitySchemes:
    app_id:
      type: apiKey
      description: API key to authorize requests.
      name: 'Authorization'
      in: header

  schemas:
    AccessionListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/StudyAccession'

    AuthBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    ManifestId:
      type: string
      format: uuid

    ManifestTypes:
      type: string
      enum: [ASG, DTOL, DTOLENV, ERGA]
      description: Projects or manifest types brokered through COPO

    ManifestList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/ManifestId'

    ManifestVersions:
      type: string
      enum: ['2.5', '2.4', '2.4.1', '2.4.2', '2.4.3']

    ReturnTypes:
      type: string
      enum: [json, csv]
      description: Return file formats

    ReturnTypes_with_rocrate:
      type: string
      enum: [json, csv, rocrate]
      description: Return file formats including RO-Crate

    SequencingCentres:
      type: string
      enum:
        [
          CENTRO NACIONAL DE ANÁLISIS GENÓMICO,
          'DNA SEQUENCING AND GENOMICS LABORATORY, HELSINKI GENOMICS CORE FACILITY',
          EARLHAM INSTITUTE,
          FUNCTIONAL GENOMIC CENTER ZURICH,
          GENOSCOPE,
          'HANSEN LAB, DENMARK',
          INDUSTRY PARTNER,
          LAUSANNE GENOMIC TECHNOLOGIES FACILITY,
          'LEIBNIZ INSTITUTE FOR THE ANALYSIS OF BIODIVERSITY CHANGE, MUSEUM KOENIG, BONN',
          'NEUROMICS SUPPORT FACILITY, UANTWERP, VIB',
          NGS BERN,
          NGS COMPETENCE CENTER TÜBINGEN,
          NORWEGIAN SEQUENCING CENTRE,
          Other_ERGA_Associated_GAL,
          SANGER INSTITUTE,
          SCILIFELAB,
          'SVARDAL LAB, ANTWERP',
          UNIVERSITY OF BARI,
          UNIVERSITY OF FLORENCE,
          WEST GERMAN GENOME CENTRE,
        ]
      description: A list of sequencing centres

    Profile:
      type: object
      properties:
        profile_id:
          type: string
        title:
          type: string
        tol_type:
          type: string
        associated_tol_type:
          type: string

    SampleAccession:
      properties:
        accessions:
          type: object
          properties:
            study_accessions:
              type: object
              properties:
                bioProjectAccession:
                  type: string
                sraStudyAccession:
                  type: string
                submissionAccession:
                  type: string
                status:
                  type: string
            sample_accessions:
              type: array
              items:
                $ref: '#/components/schemas/SimpleSampleAccession'

    SampleAccessionList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SampleAccession'

    SampleAudit_field_query_options:
      type: string
      enum:
        [
          RACK_OR_PLATE_ID,
          SPECIMEN_ID,
          TUBE_OR_WELL_ID,
          biosampleAccession,
          public_name,
          sraAccession,
        ]

    SampleAudit_update_log:
      type: object
      properties:
        field:
          type: string
        outdated_value:
          type: string
        updated_value:
          type: string
        updated_by:
          type: string
          format: email
        update_type:
          type: string
          format: string
        time_updated:
          type: string
          format: date-time
        biosampleAccession:
          type: string
        copo_id:
          type: string
        manifest_id:
          type: string
          format: uuid
        public_name:
          type: string
        sample_type:
          type: string
        sraAccession:
          type: string
        RACK_OR_PLATE_ID:
          type: string
        SPECIMEN_ID:
          type: string
        TUBE_OR_WELL_ID:
          type: string

    SampleList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_long'

    SampleListByManifestVersion:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        number_of_fields:
          type: string
        fields:
          type: array
          items:
            type: string

    SampleListByManifestVersionError:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        status:
          type: object
          properties:
            error:
              type: string
            error_details:
              type: string

    SampleListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_very_short'

    SampleStatus:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_short'

    SampleTypes:
      type: string
      enum: [asg, dtol, dtolenv, erga]
      description: Sample types brokered through COPO

    Sample_long:
      type: object
      properties:
        SERIES:
          type: string
        RACK_OR_PLATE_ID:
          type: string
        TUBE_OR_WELL_ID:
          type: string
        SPECIMEN_ID:
          type: string
        LIFESTAGE:
          type: string
        SEX:
          type: string
        ORGANISM_PART:
          type: string
        GAL:
          type: string
        GAL_SAMPLE_ID:
          type: string
        COLLECTOR_SAMPLE_ID:
          type: string
        COLLECTED_BY:
          type: string
        COLLECTOR_AFFILIATION:
          type: string
        DATE_OF_COLLECTION:
          type: string
        COLLECTION_LOCATION:
          type: string
        DECIMAL_LATITUDE:
          type: string
        HABITAT:
          type: string
        DESCRIPTION_OF_COLLECTION_METHOD:
          type: string
        EASE_OF_SPECIMEN_COLLECTION:
          type: string
        IDENTIFIED_BY:
          type: string
        IDENTIFIER_AFFILIATION:
          type: string
        IDENTIFIED_HOW:
          type: string
        SPECIMEN_IDENTITY_RISK:
          type: string
        PRESERVED_BY:
          type: string
        PRESERVER_AFFILIATION:
          type: string
        PRESERVATION_APPROACH:
          type: string
        TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION:
          type: string
        DATE_OF_PRESERVATION:
          type: string
          format: date
        SIZE_OF_TISSUES_IN_TUBE:
          type: string
        TISSUE_REMOVED_FROM_BARCODING:
          type: string
        PLATE_ID_FOR_BARCODING:
          type: string
        TUBE_OR_WELL_ID_FOR_BARCODING:
          type: string
        TISSUE_FOR_BARCODING:
          type: string
        BARCODE_PLATE_PRESERVATIVE:
          type: string
        PURPOSE_OF_SPECIMEN:
          type: string
        HAZARD_GROUP:
          type: string
        REGULATORY_COMPLIANCE:
          type: string
        BOLD_ACCESSION_NUMBER:
          type: string
        VOUCHER_ID:
          type: string
        RELATIONSHIP:
          type: string
        GRID_REFERENCE:
          type: string
        DEPTH:
          type: string
        ELEVATION:
          type: string
        TIME_OF_COLLECTION:
          type: string
        PRESERVATIVE_SOLUTION:
          type: string
        SIZE_OF_TISSUE_IN_TUBE:
          type: string
        TISSUE_REMOVED_FOR_BARCODING:
          type: string
        OTHER_INFORMATION:
          type: string
        BARCODE_HUB:
          type: string
        ORIGINAL_GEOGRAPHIC_LOCATION:
          type: string
        ORIGINAL_COLLECTION_DATE:
          type: string
        public_name:
          type: string
        biosampleAccession:
          type: string
        created_by:
          type: string
          format: email
        time_created:
          type: string
          format: date-time
        submissionAccession:
          type: string
        sraAccession:
          type: string
        manifest_id:
          type: string
          format: uuid
        manifest_version:
          type: string
        time_updated:
          type: string
          format: date-time
        updated_by:
          type: string
          format: email
        copo_id:
          type: string
        sampleDerivedFrom:
          type: string
        status:
          type: string
        copo_profile_title:
          type: string
        associated_tol_project:
          type: string
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string
        latest_update:
          type: string
          format: date-time

    Sample_long2:
      type: string
      enum:
        [
          'ASSOCIATED_PROJECT_ACCESSIONS',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_APPLICABLE',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_CONTACT',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_LABEL',
          'ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_PROJECT_ID',
          'BARCODE_HUB',
          'BARCODE_PLATE_PRESERVATIVE',
          'BARCODING_STATUS',
          'BIOBANKED_TISSUE_PRESERVATIVE',
          'BOLD_ACCESSION_NUMBER',
          'COLLECTED_BY',
          'COLLECTION_LOCATION',
          'COLLECTOR_AFFILIATION',
          'COLLECTOR_ORCID_ID',
          'COLLECTOR_SAMPLE_ID',
          'COMMON_NAME',
          'CULTURE_OR_STRAIN_ID',
          'DATE_OF_COLLECTION',
          'DATE_OF_PRESERVATION',
          'DECIMAL_LATITUDE',
          'DECIMAL_LONGITUDE',
          'DEPTH',
          'DESCRIPTION_OF_COLLECTION_METHOD',
          'DIFFICULT_OR_HIGH_PRIORITY_SAMPLE',
          'DNA_REMOVED_FOR_BIOBANKING',
          'DNA_VOUCHER_ID_FOR_BIOBANKING',
          'ELEVATION',
          'ETHICS_PERMITS_DEF',
          'ETHICS_PERMITS_FILENAME',
          'ETHICS_PERMITS_MANDATORY',
          'ETHICS_PERMITS_REQUIRED',
          'FAMILY',
          'GAL',
          'GAL_SAMPLE_ID',
          'GENUS',
          'GRID_REFERENCE',
          'HABITAT',
          'HAZARD_GROUP',
          'IDENTIFIED_BY',
          'IDENTIFIED_HOW',
          'IDENTIFIER_AFFILIATION',
          'INDIGENOUS_RIGHTS_APPLICABLE',
          'INDIGENOUS_RIGHTS_DEF',
          'INFRASPECIFIC_EPITHET',
          'LATITUDE_END',
          'LATITUDE_START',
          'LIFESTAGE',
          'LONGITUDE_END',
          'LONGITUDE_START',
          'MIXED_SAMPLE_RISK',
          'NAGOYA_PERMITS_DEF',
          'NAGOYA_PERMITS_FILENAME',
          'NAGOYA_PERMITS_MANDATORY',
          'NAGOYA_PERMITS_REQUIRED',
          'ORDER_OR_GROUP',
          'ORGANISM_PART',
          'ORIGINAL_COLLECTION_DATE',
          'ORIGINAL_DECIMAL_LATITUDE',
          'ORIGINAL_DECIMAL_LONGITUDE',
          'ORIGINAL_GEOGRAPHIC_LOCATION',
          'OTHER_INFORMATION',
          'PARTNER',
          'PARTNER_SAMPLE_ID',
          'PLATE_ID_FOR_BARCODING',
          'PRESERVATION_APPROACH',
          'PRESERVATIVE_SOLUTION',
          'PRESERVED_BY',
          'PRESERVER_AFFILIATION',
          'PRIMARY_BIOGENOME_PROJECT',
          'PROXY_TISSUE_VOUCHER_ID_FOR_BIOBANKING',
          'PROXY_VOUCHER_ID',
          'PROXY_VOUCHER_LINK',
          'PURPOSE_OF_SPECIMEN',
          'RACK_OR_PLATE_ID',
          'REGULATORY_COMPLIANCE',
          'RELATIONSHIP',
          'SAMPLE_COORDINATOR',
          'SAMPLE_COORDINATOR_AFFILIATION',
          'SAMPLE_COORDINATOR_ORCID_ID',
          'SAMPLE_FORMAT',
          'SAMPLING_PERMITS_DEF',
          'SAMPLING_PERMITS_FILENAME',
          'SAMPLING_PERMITS_MANDATORY',
          'SAMPLING_PERMITS_REQUIRED',
          'SCIENTIFIC_NAME',
          'SERIES',
          'SEX',
          'SIZE_OF_TISSUE_IN_TUBE',
          'SPECIMEN_ID',
          'SPECIMEN_IDENTITY_RISK',
          'SYMBIONT',
          'TAXON_ID',
          'TAXON_REMARKS',
          'TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION',
          'TIME_OF_COLLECTION',
          'TISSUE_FOR_BARCODING',
          'TISSUE_FOR_BIOBANKING',
          'TISSUE_REMOVED_FOR_BARCODING',
          'TISSUE_REMOVED_FOR_BIOBANKING',
          'TISSUE_REMOVED_FROM_BARCODING',
          'TISSUE_VOUCHER_ID_FOR_BIOBANKING',
          'TUBE_OR_WELL_ID',
          'TUBE_OR_WELL_ID_FOR_BARCODING',
          'VOUCHER_ID',
          'VOUCHER_INSTITUTION',
          'VOUCHER_LINK',
          'associated_tol_project',
          'biosampleAccession',
          'copo_profile_title',
          'created_by',
          'manifest_id',
          'public_name',
          'sampleDerivedFrom',
          'sampleSameAs',
          'sampleSymbiontOf',
          'sraAccession',
          'status',
          'submissionAccession',
          'time_created',
          'time_updated',
          'tol_project',
          'updated_by',
        ]
      description: Fields that are associated with a sample record in COPO
    
    Sample_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample
        manifest_id:
          type: string
          format: uuid
          description: unique identifier for manifest in which this sample appears
        manifest_version:
          type: string
          description: version number of the manifest used
        status:
          type: string
          description: status of this sample. "pending" means waiting for supervisor approval, "accepted" means supervisor approval gained, "rejected" means supervisor rejected
        time_created:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO
        time_updated:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO

    Sample_very_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample

    SimpleSampleAccession:
      type: object
      properties:
        biosampleAccession:
          type: string
        sraAccession:
          type: string
        submissionAccession:
          type: string
        status:
          type: string
        copo_sample_id:
          type: string

    SpeciesList:
      type: object
      properties:
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string

    StatsNumber:
      type: object
      properties:
        number_found:
          type: integer

    StudyAccession:
      type: object
      properties:
        bioProjectAccession:
          type: string
          description: Bioproject identifier
        sraStudyAccession:
          type: string
          description: SRA identifier for Study
        submissionAccession:
          type: string
          description: Submission identifier for Study
        status:
          type: string
          description: accepted / rejected status
        sample_biosampleId:
          type: string
          description: Queried for sample biosample id

    TOLProjectList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            type: string

    UpdatableFields_ASG:
      type: string
      enum:
        [
          BARCODE_HUB,
          BARCODE_PLATE_PRESERVATIVE,
          BOLD_ACCESSION_NUMBER,
          COLLECTOR_SAMPLE_ID,
          CULTURE_OR_STRAIN_ID,
          DATE_OF_PRESERVATION,
          DEPTH,
          DIFFICULT_OR_HIGH_PRIORITY_SAMPLE,
          ELEVATION,
          HAZARD_GROUP,
          IDENTIFIED_BY,
          IDENTIFIED_HOW,
          IDENTIFIER_AFFILIATION,
          INFRASPECIFIC_EPITHET,
          LIFESTAGE,
          PARTNER_SAMPLE_ID,
          PLATE_ID_FOR_BARCODING,
          PRESERVED_BY,
          PRESERVER_AFFILIATION,
          PURPOSE_OF_SPECIMEN,
          RELATIONSHIP,
          SEX,
          SIZE_OF_TISSUE_IN_TUBE,
          SPECIMEN_ID_RISK,
          TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION,
          TIME_OF_COLLECTION,
          TISSUE_FOR_BARCODING,
          TISSUE_REMOVED_FOR_BARCODING,
          TUBE_OR_WELL_ID_FOR_BARCODING,
          VOUCHER_ID,
        ]
      description: Fields that can be updated for 'ASG' projects brokered through COPO

    UpdatableFields_DTOL:
      type: string
      enum:
        [
          BARCODE_HUB,
          BARCODE_PLATE_PRESERVATIVE,
          BOLD_ACCESSION_NUMBER,
          COLLECTOR_SAMPLE_ID,
          CULTURE_OR_STRAIN_ID,
          DATE_OF_PRESERVATION,
          DEPTH,
          DIFFICULT_OR_HIGH_PRIORITY_SAMPLE,
          ELEVATION,
          GAL_SAMPLE_ID,
          HAZARD_GROUP,
          IDENTIFIED_BY,
          IDENTIFIED_HOW,
          IDENTIFIER_AFFILIATION,
          INFRASPECIFIC_EPITHET,
          LIFESTAGE,
          PLATE_ID_FOR_BARCODING,
          PRESERVED_BY,
          PRESERVER_AFFILIATION,
          PURPOSE_OF_SPECIMEN,
          RELATIONSHIP,
          SEX,
          SIZE_OF_TISSUE_IN_TUBE,
          SPECIMEN_IDENTITY_RISK,
          TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION,
          TIME_OF_COLLECTION,
          TISSUE_FOR_BARCODING,
          TISSUE_REMOVED_FOR_BARCODING,
          TUBE_OR_WELL_ID_FOR_BARCODING,
          VOUCHER_ID,
        ]
      description: Fields that can be updated for 'DTOL' projects brokered through COPO

    UpdatableFields_ERGA:
      type: string
      enum:
        [
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_CONTACT,
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_PROJECT_ID,
          ASSOCIATED_TRADITIONAL_KNOWLEDGE_OR_BIOCULTURAL_RIGHTS_APPLICABLE,
          BARCODE_HUB,
          BARCODING_STATUS,
          BARCODE_PLATE_PRESERVATIVE,
          BIOBANKED_TISSUE_PRESERVATIVE,
          COLLECTED_BY,
          COLLECTION_LOCATION,
          COLLECTOR_AFFILIATION,
          COLLECTOR_SAMPLE_ID,
          COMMON_NAME,
          CULTURE_OR_STRAIN_ID,
          DATE_OF_COLLECTION,
          DATE_OF_PRESERVATION,
          DECIMAL_LATITUDE,
          DECIMAL_LONGITUDE,
          DEPTH,
          DESCRIPTION_OF_COLLECTION_METHOD,
          DIFFICULT_OR_HIGH_PRIORITY_SAMPLE,
          DNA_REMOVED_FOR_BIOBANKING,
          DNA_VOUCHER_ID_FOR_BIOBANKING,
          ELEVATION,
          ETHICS_PERMITS_DEF,
          ETHICS_PERMITS_FILENAME,
          ETHICS_PERMITS_REQUIRED,
          FAMILY,
          GAL,
          GAL_SAMPLE_ID,
          GENUS,
          GRID_REFERENCE,
          HABITAT,
          HAZARD_GROUP,
          IDENTIFIED_BY,
          IDENTIFIED_HOW,
          IDENTIFIER_AFFILIATION,
          IDENTIFIER_AFFILIATION,
          INDIGENOUS_RIGHTS_APPLICABLE,
          INDIGENOUS_RIGHTS_DEF,
          INDIGENOUS_RIGHTS_DEF,
          INFRASPECIFIC_EPITHET,
          LIFESTAGE,
          NAGOYA_PERMITS_DEF,
          NAGOYA_PERMITS_FILENAME,
          NAGOYA_PERMITS_REQUIRED,
          ORDER_OR_GROUP,
          ORGANISM_PART,
          ORIGINAL_COLLECTION_DATE,
          ORIGINAL_GEOGRAPHIC_LOCATION,
          OTHER_INFORMATION,
          PRESERVATION_APPROACH,
          PRESERVATIVE_SOLUTION,
          PRESERVED_BY,
          PRESERVER_AFFILIATION,
          PROXY_TISSUE_VOUCHER_ID_FOR_BIOBANKING,
          PROXY_VOUCHER_ID,
          PROXY_VOUCHER_LINK,
          PURPOSE_OF_SPECIMEN,
          REGULATORY_COMPLIANCE,
          RELATIONSHIP,
          SAMPLE_COORDINATOR,
          SAMPLE_COORDINATOR_AFFILIATION,
          SAMPLE_COORDINATOR_ORCID_ID,
          SAMPLING_PERMITS_FILENAME,
          SAMPLING_PERMITS_REQUIRED,
          SCIENTIFIC_NAME,
          SEX,
          SIZE_OF_TISSUE_IN_TUBE,
          SPECIMEN_IDENTITY_RISK,
          TAXON_ID,
          TAXON_REMARKS,
          TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION,
          TIME_OF_COLLECTION,
          TISSUE_FOR_BARCODING,
          TISSUE_FOR_BIOBANKING,
          TISSUE_REMOVED_FOR_BARCODING,
          TISSUE_REMOVED_FOR_BIOBANKING,
          TISSUE_REMOVED_FROM_BARCODING,
          TISSUE_VOUCHER_ID_FOR_BIOBANKING,
          TUBE_OR_WELL_ID_FOR_BARCODING,
          VOUCHER_ID,
          VOUCHER_INSTITUTION,
          VOUCHER_LINK,
        ]
      description: Fields that can be updated for 'ERGA' projects brokered through COPO

openapi: 3.0.0
info:
  title: COPO API
  description: |
    The following are Swagger Application Programming Interface (API) methods for manifests, samples, statistics and profiles 
    in the **Collaborative OPen Omics (COPO)** project.

    API methods are documentated [here](https://copo-docs.readthedocs.io/en/latest/retrieval/copo-api.html).

    Choose one of the available API servers from the **Servers** dropdown menu then, perform the desired API method.
    - **Live Server**
    - **Demo Server**
    - **Local Server 1**
    - **Local Server 2**

    > If you get the error, ``TypeError: Failed to fetch`` or ``TypeError: NetworkError when attempting to fetch resource.``, 
      please ensure that you have selected the correct API server from the **Servers** dropdown menu.
  version: 1.1.8
servers:
  - url: https://copo-project.org/api
    description: Live Server
  - url: http://demo.copo-project.org/api
    description: Demo Server
  - url: http://127.0.0.1:8000/api
    description: Local Server 1
  - url: http://127.0.0.1:8001/api
    description: Local Server 2

paths:
  /apiKey/:
    post:
      tags:
        - API Key
      summary: Obtain API Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema: # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Username and Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthBody'

  /manifest:
    get:
      tags:
        - Manifest
      summary: Get all manifests
      description: >
        If no manifest ID is provided, COPO simply returns a list of all manifest ids
      parameters:
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        200:
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'

  /manifest/current_version:
    get:
      tags:
        - Manifest
      summary: Get current manifest version
      description: >
        If no manifest type is provided, COPO will return a list of projects brokered with the latest manifest version of each project.
      parameters:
        - in: query
          name: manifest_type
          schema:
            $ref: '#/components/schemas/ManifestTypes'
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        200:
          description: A JSON array of the latest manifest version for a given project type

  /manifest/{manifest_id}:
    get:
      tags:
        - Manifest
      summary: Get samples in manifest
      description: >
        Get full sample information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv, rocrate]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: invalid manifest_id

  /manifest/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - in: query
          name: return_type
          schema:
            type: string
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\'

  /manifest/{project}/{from}/{to}:
    get:
      tags:
        - Manifest
      summary: Get manifest ids of a project between dates
      description: >
        Returns an array of manifest ids for samples submitted between dates {from} / {to} in project {project}
      parameters:
        - name: project
          in: path
          required: true
          description: a comma separate list of supported EBP projects in lower case (dtol|asg|dtol_env|erga)
          schema:
            type: string
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests greater than or equal to this will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, manifests less than this will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array of sample manifest uuid objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestList'
        '400':
          description: \'from\' must be earlier than \'to\ and project must be in the list of supported projects'

  /manifest/{manifest_id}/sample_statuses:
    get:
      tags:
        - Manifest
      summary: Get status of samples in manifest
      description: >
        Get minimal sample status information for each sample contained in the given {manifest_id}
      parameters:
        - name: manifest_id
          in: path
          required: true
          description: uuid of the manifest in question
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array of sample status objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleStatus'
        '400':
          description: invalid manifest_id

  /sample/{project}:
    get:
      tags:
        - Sample
      summary: Get sample records in a project
      description: >
        Get a list of all the samples of a project in COPO
      parameters:
        - name: project
          in: path
          required: true
          description: Format - a comma separated list of supported projects. Supported projects - ASG, DTOL, ERGA
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample copo_ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListShort'
        '400':
          description: InvalidId found in request

        '404':
          description: Invalid project found in request. No sample records exist for the given project.

  /sample/associated_tol_project/{values}:
    get:
      tags:
        - Sample
      summary: Get sample records in a project by associated project type(s)
      description: >
        Get a list of all the samples of a project in COPO by associated project type
      parameters:
        - name: values
          in: path
          required: true
          description: ampersand (&) separated list of supported associated project types
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: Invalid associated profile type found in request

        '404':
          description: Invalid associated project type found in request. No sample records exist for the given associated project.

  /sample/project/manifest_version/fields:
    get:
      tags:
        - Sample
      summary: Fetch project fields by manifest version
      description: >
        Get a list of fields of a project for a given manifest version.</br></br>
        If project type is provided and no manifest version is provided, COPO will return a list of fields for the given project type according to the latest manifest version for that project.</br></br>
        If no project type is provided and manifest version is provided, COPO will return a list of fields for the given project type that matches the given manifest version.</br></br>
        If no project type and no manifest version are provided, COPO will return a list of fields for all projects according to the latest manifest version for that project.
      parameters:
        - name: project
          in: query
          schema:
            $ref: '#/components/schemas/ManifestTypes'
        - name: manifest_version
          in: query
          schema:
            $ref: '#/components/schemas/ManifestVersions'
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array of fields for a given manifest version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersion'

        '400':
          description: Invalid manifest version found in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleListByManifestVersionError'

  /sample/{from}/{to}:
    get:
      tags:
        - Sample
      summary: Get sample records between dates
      description: >
        Returns an array of sample objects submitted between dates {from} / {to}
      parameters:
        - name: from
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created greater than or equal to this date will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - name: to
          in: path
          required: true
          description: ISO 8601 formatted full date-time, samples created less than this date will be matched, e.g. 2020-09-24T17:00:22+00:00
          schema:
            type: string
            format: date-time
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array of sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: \'from\' must be earlier than \'to\'

  /sample/updatable_fields/{project}:
    get:
      tags:
        - Sample
      summary: Get fields that can be updated by resubmitting a manifest in a project
      description: >
        Get a list of all the fields of a project that can be updated in COPO
      parameters:
        - name: project
          in: path
          required: true
          description: Available projects - ASG, DTOL, ERGA
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into csv format
      responses:
        '200': # status code
          description: A JSON array of updatable sample fields

        '400':
          description: Invalid project found in request

        '401':
          description: No updatable fields found for given project

        '500':
          description: No samples exist for given project(s)

  /sample/copo_id/{copo_ids}:
    get:
      tags:
        - Sample
      summary: Get sample records by copo_id
      description: >
        Get full sample information for the samples returned from the given {copo_ids}. In public repositories, "copo_id" is referred to as "alias".
      parameters:
        - name: copo_ids
          in: path
          required: true
          description: hexadecimal sample ids, separated by commas
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'
        '400':
          description: InvalidId found in request

  /sample/biosample_id/{biosample_ids}:
    get:
      tags:
        - Sample
      summary: Get sample records by biosampleAccession
      description: >
        Get full sample information for the samples returned from the given {biosample_ids}
      parameters:
        - name: biosample_ids
          in: path
          required: true
          description: biosample accessions created by ENA, separated by commas
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'

  /sample/sample_field/{field}/{values}:
    get:
      tags:
        - Sample
      summary: Get sample records by field and value(s)
      description: >
        Get full sample information for the samples returned from the given {field} / {values}
      parameters:
        - name: field
          in: path
          required: true
          description: a known sample field to search for
          schema:
            type: string
            minimum: 1
            maximum: 1
        - name: values
          in: path
          required: true
          description: Format - a comma separated list of values to look for
          schema:
            type: string
            minimum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleList'

  /sample/StudyFromSampleAccession/{sample_ids}:
    get:
      tags:
        - Sample
      summary: Get study records by sample accessions
      description: >
        Get study information for the samples returned from the given {sample_ids}
      parameters:
        - name: sample_ids
          in: path
          required: true
          description: Format - a comma separated list of biosample accessions or ENA/SRA accessions
          schema:
            type: string
            minimum: 1
            maximum: 1
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessionListShort'

  /sample/SampleFromStudyAccession/{biostudyAccessions}:
    get:
      tags:
        - Sample
      summary: Get samples by biostudyAccessions
      description: >
        Get accession information for the samples returned from the given {biostudyAccessions}
      parameters:
        - name: biostudyAccessions
          in: path
          required: true
          description: Format - a comma separated list of biostudy accessions
          schema:
            type: string
        - in: query
          name: return_type
          schema:
            enum: [json, csv]
          description: Export data into selected format
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleAccessionList'

  /stats/number_of_users/:
    get:
      tags:
        - Stats
      summary: Get number of registered COPO users
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'

  /stats/number_of_dtol_samples/:
    get:
      tags:
        - Stats
      summary: Get number of registered DTOL samples
      responses:
        '200': # status code
          description: A JSON array sample objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsNumber'

  /stats/tol_projects/:
    get:
      tags:
        - Stats
      summary: Get all Tree of Life (ToL) projects or main projects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of projects brokered through COPO
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'

  /stats/associated_tol_projects/:
    get:
      tags:
        - Stats
      summary: Get all associated Tree of Life (ToL) projects or subprojects brokered through COPO
      responses:
        '200': # status code
          description: A JSON array of all subprojects brokered through COPO. One or more of the subprojects listed are a part of a larger project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TOLProjectList'
        '400':
          description: Invalid project found in request

        '500':
          description: No samples exist for given project(s)

  /profile/make_profile/:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Make a profile for authenticated user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - title
                - description
                - profile_type
              properties:
                title: # <!--- form field name
                  type: string
                  required: true
                description:
                  type: string
                  required: true
                profile_type:
                  type: string
                  enum:
                    [
                      'Stand-alone',
                      'Darwin Tree of Life (DTOL)',
                      'Darwin Tree of Life Environmental Samples (DTOL_ENV)',
                      'Aquatic Symbiosis Genomics (ASG)',
                      'European Reference Genome Atlas (ERGA)',
                    ]
                  required: true
      responses:
        '200':
          description: representation of the created profile

  /profile/get_for_user/:
    post:
      tags:
        - Profile
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      summary: Get profile records for authenticated user
      responses:
        '200':
          description: representation of the created profile

  /manifest/validate/:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - profile_id
                - manifest
              type: object
              properties:
                profile_id:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: id of queued validation report to be queried

  /manifest/validate/report/:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      consumes:
        - application/x-www-form-urlencoded
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - validation_report_id
              properties:
                validation_report_id:
                  type: string
      responses:
        '200':
          description: status and/or validation errors for given manifest validation

  /manifest/validations/:
    post:
      tags:
        - Manifest
      security:
        - app_id: []
      responses:
        '200':
          description: validations for authorised user

components:
  securitySchemes:
    app_id:
      type: apiKey
      description: API key to authorize requests.
      name: 'Authorization'
      in: header

  schemas:
    AccessionListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/StudyAccession'

    AuthBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    ManifestId:
      type: string
      format: uuid

    ManifestTypes:
      type: string
      enum: [ASG, DTOL, DTOL_ENV, ERGA]
      description: Projects or manifest types brokered through COPO

    ManifestList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/ManifestId'

    ManifestVersions:
      type: string
      enum: ['2.4', '2.4.1', '2.4.2', '2.4.3']

    Profile:
      type: object
      properties:
        profile_id:
          type: string
        title:
          type: string
        tol_type:
          type: string
        associated_tol_type:
          type: string

    SampleAccession:
      properties:
        accessions:
          type: object
          properties:
            study_accessions:
              type: object
              properties:
                bioProjectAccession:
                  type: string
                sraStudyAccession:
                  type: string
                submissionAccession:
                  type: string
                status:
                  type: string
            sample_accessions:
              type: array
              items:
                $ref: '#/components/schemas/SimpleSampleAccession'

    SampleAccessionList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/SampleAccession'

    SampleList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_long'

    SampleListByManifestVersion:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        number_of_fields:
          type: string
        fields:
          type: array
          items:
            type: string

    SampleListByManifestVersionError:
      type: object
      properties:
        project_type:
          type: string
        manifest_version:
          type: string
        status:
          type: object
          properties:
            error:
              type: string
            error_details:
              type: string

    SampleListShort:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_very_short'

    SampleStatus:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sample_short'

    Sample_long:
      type: object
      properties:
        SERIES:
          type: string
        RACK_OR_PLATE_ID:
          type: string
        TUBE_OR_WELL_ID:
          type: string
        SPECIMEN_ID:
          type: string
        LIFESTAGE:
          type: string
        SEX:
          type: string
        ORGANISM_PART:
          type: string
        GAL:
          type: string
        GAL_SAMPLE_ID:
          type: string
        COLLECTOR_SAMPLE_ID:
          type: string
        COLLECTED_BY:
          type: string
        COLLECTOR_AFFILIATION:
          type: string
        DATE_OF_COLLECTION:
          type: string
        COLLECTION_LOCATION:
          type: string
        DECIMAL_LATITUDE:
          type: string
        HABITAT:
          type: string
        DESCRIPTION_OF_COLLECTION_METHOD:
          type: string
        EASE_OF_SPECIMEN_COLLECTION:
          type: string
        IDENTIFIED_BY:
          type: string
        IDENTIFIER_AFFILIATION:
          type: string
        IDENTIFIED_HOW:
          type: string
        SPECIMEN_IDENTITY_RISK:
          type: string
        PRESERVED_BY:
          type: string
        PRESERVER_AFFILIATION:
          type: string
        PRESERVATION_APPROACH:
          type: string
        TIME_ELAPSED_FROM_COLLECTION_TO_PRESERVATION:
          type: string
        DATE_OF_PRESERVATION:
          type: string
          format: date
        SIZE_OF_TISSUES_IN_TUBE:
          type: string
        TISSUE_REMOVED_FROM_BARCODING:
          type: string
        PLATE_ID_FOR_BARCODING:
          type: string
        TUBE_OR_WELL_ID_FOR_BARCODING:
          type: string
        TISSUE_FOR_BARCODING:
          type: string
        BARCODE_PLATE_PRESERVATIVE:
          type: string
        PURPOSE_OF_SPECIMEN:
          type: string
        HAZARD_GROUP:
          type: string
        REGULATORY_COMPLIANCE:
          type: string
        VOUCHER_ID:
          type: string
        RELATIONSHIP:
          type: string
        GRID_REFERENCE:
          type: string
        DEPTH:
          type: string
        ELEVATION:
          type: string
        TIME_OF_COLLECTION:
          type: string
        PRESERVATIVE_SOLUTION:
          type: string
        SIZE_OF_TISSUE_IN_TUBE:
          type: string
        TISSUE_REMOVED_FOR_BARCODING:
          type: string
        OTHER_INFORMATION:
          type: string
        BARCODE_HUB:
          type: string
        ORIGINAL_GEOGRAPHIC_LOCATION:
          type: string
        ORIGINAL_COLLECTION_DATE:
          type: string
        boldAccession:
          type: string
        public_name:
          type: string
        biosampleAccession:
          type: string
        created_by:
          type: string
          format: email
        time_created:
          type: string
          format: date-time
        submissionAccession:
          type: string
        sraAccession:
          type: string
        manifest_id:
          type: string
          format: uuid
        manifest_version:
          type: string
        time_updated:
          type: string
          format: date-time
        updated_by:
          type: string
          format: email
        copo_id:
          type: string
        sampleDerivedFrom:
          type: string
        status:
          type: string
        copo_profile_title:
          type: string
        associated_tol_project:
          type: string
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string
        latest_update:
          type: string
          format: date-time

    Sample_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample
        manifest_id:
          type: string
          format: uuid
          description: unique identifier for manifest in which this sample appears
        manifest_version:
          type: string
          description: version number of the manifest used
        status:
          type: string
          description: status of this sample. "pending" means waiting for supervisor approval, "accepted" means supervisor approval gained, "rejected" means supervisor rejected
        time_created:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO
        time_updated:
          type: string
          format: date-time
          description: when was this sample uploaded to COPO

    Sample_very_short:
      type: object
      properties:
        copo_id:
          type: string
          description: unique COPO identifier for this sample

    SimpleSampleAccession:
      type: object
      properties:
        biosampleAccession:
          type: string
        sraAccession:
          type: string
        submissionAccession:
          type: string
        status:
          type: string
        copo_sample_id:
          type: string

    SpeciesList:
      type: object
      properties:
        SYMBIONT:
          type: string
        TAXON_ID:
          type: string
        ORDER_OR_GROUP:
          type: string
        FAMILY:
          type: string
        GENUS:
          type: string
        SCIENTIFIC_NAME:
          type: string
        INFRASPECIFIC_EPITHET:
          type: string
        CULTURE_OR_STRAIN_ID:
          type: string
        COMMON_NAME:
          type: string
        TAXON_REMARKS:
          type: string

    StatsNumber:
      type: object
      properties:
        number_found:
          type: integer

    StudyAccession:
      type: object
      properties:
        bioProjectAccession:
          type: string
          description: Bioproject identifier
        sraStudyAccession:
          type: string
          description: SRA identifier for Study
        submissionAccession:
          type: string
          description: Submission identifier for Study
        status:
          type: string
          description: accepted / rejected status
        sample_biosampleId:
          type: string
          description: Queried for sample biosample id

    TOLProjectList:
      type: object
      properties:
        status:
          type: string
          enum: ['OK', 'Error']
        number_found:
          type: integer
        data:
          type: array
          items:
            type: string

# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    #working_directory: /home/circleci
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:2023.12

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      #- attach_workspace: {at: /home/circleci}
      - setup_remote_docker
      - run: "docker build . -f deployment/web/Dockerfile_circleci -t local_copo_web:v1.0" 
      - run: |
          docker-compose -f test/docker-compose.yaml up -d          
      - run:
          name: wait for copo_web
          command: |
              set -xe

              wait_for_readiness() {
                local SERVICE="$1"
                local PORT="$2"
                local TRY_TIMEOUT=120
                local TRY_INTERVAL=5
                local REMAINING_TIME=$TRY_TIMEOUT
                while ! docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_web) bash -c 'curl http://127.0.0.1:8000 -s -I | head -n1 | grep -q 200' ;
                do
                  REMAINING_TIME=$((REMAINING_TIME-TRY_INTERVAL))
                  if [ $REMAINING_TIME -lt 0 ];
                  then
                    echo "Error: ${SERVICE} did not start in expected duration."
                    docker ps -a
                    docker logs   $(docker-compose -f test/docker-compose.yaml ps -q copo_web)
                    curl http://127.0.0.1:8000/
                    exit 1
                  fi
                  echo "Waiting for ${SERVICE} to start... remaning ${REMAINING_TIME} seconds."
                  sleep $TRY_INTERVAL
                done
                echo "The ${SERVICE} is ready to be tested."
              }
  
              wait_for_readiness  copo_web 8000
              docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_web) bash -c 'python manage.py makemigrations && python manage.py makemigrations allauth && python manage.py migrate && python manage.py setup_sequencing_centres && python manage.py createsuperuser --noinput'
      - run: "docker cp test/testfiles/. $(docker-compose -f test/docker-compose.yaml ps -q copo_browser):/usr/src/app/workspace"
      - run:  |
            ( echo "running copo-login-logout.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/copo-login-logout.js)" && \
            echo "running assign_permission.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/assign_permission.js)" && \
            echo "running assign_sequencing_center.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/assign_sequencing_center.js)" && \
            echo "running ERGA_profile.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/ERGA_profile.js)" && \
            echo "running ERGA_upload_manifest.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/ERGA_upload_manifest.js)" && \
            echo "running ERGA_approve_samples.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/ERGA_approve_samples.js)" && \
            echo "running ERGA_update_manifest.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/ERGA_update_manifest.js)" && \
            echo "running ERGA_approve_samples.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/ERGA_approve_samples.js)" && \
            echo "running Standalone_profile.js" && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/Standalone_profile.js)"  && \
            #echo "running Standalone_files.js" && \
            #docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_browser) node -e "$(cat test/testcases/Standalone_files.js)"  && \
            echo "done") || \
            (docker logs $(docker-compose -f test/docker-compose.yaml ps -q copo_web) && \
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_web) bash -c "less /copo/logs/*.log" && exit 1)
      - run : |
            docker logs $(docker-compose -f test/docker-compose.yaml ps -q copo_web) 
            docker exec $(docker-compose -f test/docker-compose.yaml ps -q copo_web) bash -c "less /copo/logs/*.log

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build_and_test:
    jobs:
      - build:
          context: "COPO-WEB"
